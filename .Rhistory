(1 | seasonYear) +                       # Random intercept for year
(1 | prevWintPPT),                        # Random intercept for site
data = earliest_data)
VarCorr(model)
model <- blmer(ordinal_date ~ data_type +           # Fixed effect
(1 | seasonYear),                        # Random intercept for site
data = earliest_data)
model <- blmer(ordinal_date ~ data_type +           # Fixed effect
#(1 | seasonYear) +                       # Random intercept for year
(1 | prevWintPPT),                        # Random intercept for site
data = earliest_data)
model <- blmer(ordinal_date ~ data_type +           # Fixed effect
(seasonYear) +                       # fixed intercept for year
(1 | prevWintPPT),                        # Random intercept for site
data = earliest_data)
model <- blmer(ordinal_date ~ data_type +           # Fixed effect
(1 | seasonYear) +                       # Random intercept for year
prevWintPPT,                        # Random intercept for site
data = earliest_data)
model <- blmer(ordinal_date ~ (1|data_type) +           # Fixed effect
seasonYear +                       # Random intercept for year
prevWintPPT,                        # Random intercept for site
data = earliest_data)
VarCorr(model)
model <- blmer(ordinal_date ~ data_type +           # Fixed effect
#(1 | seasonYear) +                       # Random intercept for year
(1 | prevWintPPT),                        # Random intercept for site
data = earliest_data)
VarCorr(model)
model <- blmer(ordinal_date ~ data_type +           # Fixed effect
#(1 | seasonYear) +                       # Random intercept for year
prevWintPPT,                        # Random intercept for site
data = earliest_data)
model <- blmer(ordinal_date ~ data_type +           # Fixed effect
(1 | seasonYear) +                       # Random intercept for year
prevWintPPT,                        # Random intercept for site
data = earliest_data)
View(earliest_data)
View(abio.df)
View(phen.abio)
dim(phen.abio)
length(unique(phen.abio$catalog_number))
length(is.na(phen.abio$catalog_number))
try earliest_data %>% mutate(plantID = row_number())
try=earliest_data %>% mutate(plantID = row_number())
load("/Users/elizabethlombardi/Desktop/Research/UNM/Erin phenology project/Phenology collections project/phenAbio.RData")
View(phen.abio)
names(phen.abio)
library(corrr)
install.packages("corrr")
install.packages("ggcorrplot")
library(corrr)
library(ggcorrplot)
install.packages("FactoMineR")
library("FactoMineR")
str(phen.abio)
#select only the relevant columns
phen.abio2 <- phen.abio %>%
select(scientific_name, ordinal_date)
#select only the relevant columns
phen.abio2 <- phen.abio %>%
select(scientific_name, ordinal_date, site, elevation_m, data_type, tmean.avg, ppt.mean, seasonYear, prevWinterPPT, prevWintTemp)
#select only the relevant columns
phen.abio2 <- phen.abio %>%
select(scientific_name, ordinal_date, site, elevation_m, data_type, tmean.avg, ppt.mean, seasonYear, prevWintPPT, prevWintTemp)
str(phen.abio2)
#check for null values
colSums(is.na(phen.abio2))
View(phen.abio2)
#select only the relevant columns
phen.abio2 <- phen.abio %>%
select(scientific_name, ordinal_date, site, elevation_m, data_type, tmean.avg, ppt.mean, seasonYear, prevWintPPT, prevWintTemp) %>%
mutate(occID = row.names())
names(phen.abio)<-seq.int(nrow(phen.abio))
try <- phen.abio %>% mutate(occID = row_number())
phen.abio <- phen.abio %>% mutate(occID = row_number())
names(phen.abio)
#select only the relevant columns
phen.abio2 <- phen.abio %>%
select(occID, scientific_name, ordinal_date, site, elevation_m, data_type, tmean.avg, ppt.mean, seasonYear, prevWintPPT, prevWintTemp)
str(phen.abio2)
names(phen.abio)
str(phen.abio2)
#check for null values
colSums(is.na(phen.abio2)) #there are 49 problematic occurrences that I need to ask Erin about
#Normalize data (keep only numeric variables for the PCA)
phen.num <- phen.abio2 %>% select(where(is.numeric))
phen.norm <- phen.abio2 %>%
select(where(is.numeric)) %>%
scale()
head(phen.norm)
#PCA
try <- princomp(phen.norm)
#Normalize data that is numeric for PCA
phen.norm <- phen.abio2 %>%
mutate(elevation_m=as.numeric()) %>%
select(where(is.numeric)) %>%
scale()
length(phen.abio$elevation_m)
length(unique(phen.abio$elevation_m))
str(phen.norm)
head(phen.norm)
dim(phen.norm)
str(phen.norm)
is.list(phen.norm)
is.data.frame(phen.norm)
is.tibble(phen.norm)
class(phen.norm)
#PCA
pca_result <- prcomp(phen.norm, center = FALSE, scale. = FALSE)  # Since data is already normalized
anyNA(phen.abio2)
any(is.infinite(phen.abio2))
any(is.infinite(phen.norm))
#remove NA values: ASK ERIN WHY THESE ARE IN THE DATAFRAME TO BEGIN WITH
phen.abio2 <- phen.abio2[complete.cases(phen.abio2), ]
anyNA(phen.abio2) #confirming. We need to remove these!
#Normalize data that is numeric for PCA
phen.norm <- phen.abio2 %>%
select(where(is.numeric)) %>%
scale()
head(phen.norm)
dim(phen.norm)
any(is.infinite(phen.norm)) #no infinite values! Good.
#PCA
pca_result <- prcomp(phen.norm, center = FALSE, scale. = FALSE)  # Since data is already normalized
summary(pca_result)
#Below is directly from ChatGPT
# Extract the variance explained by each component
pca_variance <- pca_result$sdev^2
pca_variance_explained <- pca_variance / sum(pca_variance)
# Create a scree plot
scree_plot <- data.frame(PC = 1:length(pca_variance_explained),
Variance_Explained = pca_variance_explained)
scree_plot
ggplot(scree_plot, aes(x = PC, y = Variance_Explained)) +
geom_bar(stat = "identity") +
geom_line(aes(group = 1), color = "red") +
geom_point() +
labs(title = "Scree Plot", x = "Principal Component", y = "Variance Explained")
ggplot(scree_plot, aes(x = PC, y = Variance_Explained)) +
geom_bar(stat = "identity") +
labs(title = "Scree Plot", x = "Principal Component", y = "Variance Explained")
ggplot(scree_plot, aes(x = PC, y = Variance_Explained)) +
geom_bar(stat = "identity") +
labs(title = "Variance in Erin's Data", x = "Principal Component", y = "Variance Explained") +
theme_bw()
# Biplot of the first two principal components
biplot(pca_result, scale = 0)  # You can use other parameters to fine-tune the biplot
View(pca_result)
pca_variance_explained
pca_loadings <- pca_result$rotation
pca_loadings
loadings[, 1:8]
pca_loadings[, 1:8]
barplot(pca_loadings, main = "Loadings for PC", las = 2, col = "blue", cex.names = 0.7)
barplot(pca_loadings, main = "Loadings for PC", las = 2, col = "olivegreen2", cex.names = 0.7)
barplot(pca_loadings, main = "Loadings for PC", las = 2, col = "forestgreen", cex.names = 0.7)
ggplot(scree_plot, aes(x = PC, y = Variance_Explained)) +
geom_bar(stat = "identity") +
labs(title = "Variance in Erin's Data", x = "Principal Component", y = "Variance Explained") +
theme_bw()
# Biplot of the first two principal components
biplot(pca_result, scale = 2)  # You can use other parameters to fine-tune the biplot
0
# Biplot of the first two principal components
biplot(pca_result, scale = 0)  # You can use other parameters to fine-tune the biplot
# Biplot of the first two principal components
biplot(pca_result, scale = .5)  # You can use other parameters to fine-tune the biplot
install.packages("devtools")
devtools::install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE) + # Draws a circle that indicates unit variance
scale_color_discrete(name = 'Your Group Label') +  # Customize legend
theme_minimal() +  # Clean theme for readability
theme(legend.position = 'bottom')
pca_result$x
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE) + # Draws a circle that indicates unit variance
scale_color_discrete(name = 'Your Group Label') +  # Customize legend
theme_minimal() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE) + # Draws a circle that indicates unit variance
scale_color_discrete() +  #
theme_minimal() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE) + # Draws a circle that indicates unit variance
scale_color_discrete('red') +  #
theme_minimal() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1.5) +
scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 4,
varname.adjust =1) +
scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE) + # Draws a circle that indicates unit variance
geom_point(aes(color = "blue"), size = 3, alpha = 0.6) +  # Set point color and transparency
scale_color_discrete() +
theme_minimal() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
scale_color_discrete(alpha=.5) +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
geom_point(color = "blue", size = 3, alpha = 0.6) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
geom_point(color = "blue", size = 3, alpha = 0.1) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
geom_point(color = "lightgrey", size = 3, alpha = 0.1) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 2,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 10,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 10, var.scale = 1,
#groups = factor(your_grouping_variable),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(ordinal.date),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(ordinal_date),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(PC1),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(phen.abio2$site),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
#scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(phen.abio2$site),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 5,
varname.adjust =1,) +
scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(phen.abio2$site),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 4,
varname.adjust =1,) +
scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(phen.abio2$data_type),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 4,
varname.adjust =1,) +
scale_color_discrete() +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(phen.abio2$data_type),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 4,
varname.adjust =1,) +
scale_color_manual(values=c("red", "goldenrod", "darkslategrey")) +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(phen.abio2$data_type),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 4,
varname.adjust =1,) +
scale_color_manual(values=c( "#CCBB44", "#AA3377")) +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
PCA_biplot<- ggbiplot(pca_result, obs.scale = 1, var.scale = 1,
groups = factor(phen.abio2$data_type),  # Replace with your grouping variable if applicable
ellipse = TRUE,  # Adds confidence ellipses around groups
circle = TRUE,
varname.size = 4,
varname.adjust =1,) +
scale_color_manual(values=c( "#CCBB44", "#AA3377")) +  #
theme_bw() +  # Clean theme for readability
theme(legend.position = 'bottom')
ggsave("/Users/elizabethlombardi/Desktop/Research/UNM/Erin phenology project/Figures/PCA_biplot.png", PCA_biplot, width = 6, height = 6 , dpi = 300)
pca_loadings
write.csv(pca_loadings, file="/Users/elizabethlombardi/Desktop/Research/UNM/Erin phenology project/PCA_loadings.csv", row.names=TRUE)
# Fit mixed-effects model with fixed effects for year and random effects for data_type; when I included site it was over-fit
mixed_model <- lmer(ordinal_date ~ year + prevWintPPT+ (1 | occID), data = earliest_data)
# Initialize an empty list to store models
mixed_models <- list()
spp <- unique(phen.abio$scientific_name)
# Loop through each species
for (i in spp) {
# Subset data for the current species
subset_data <- subset(phen.abio, scientific_name == i)
# Find the earliest observation for each year while keeping all variables
earliest_data <- subset_data %>%
group_by(year, prevWintPPT, data_type) %>%
filter(ordinal_date == min(ordinal_date)) %>%
ungroup()
# Fit mixed-effects model with fixed effects for year and random effects for data_type; when I included site it was over-fit
mixed_model <- lmer(ordinal_date ~ year + prevWintPPT+ (1 | occID), data = earliest_data)
# Store the mixed-effects model in the list with species name as key
mixed_models[[i]] <- mixed_model
}
library(dplyr)
# Loop through each species
for (i in spp) {
# Subset data for the current species
subset_data <- subset(phen.abio, scientific_name == i)
# Find the earliest observation for each year while keeping all variables
earliest_data <- subset_data %>%
group_by(year, prevWintPPT, data_type) %>%
filter(ordinal_date == min(ordinal_date)) %>%
ungroup()
# Fit mixed-effects model with fixed effects for year and random effects for data_type; when I included site it was over-fit
mixed_model <- lmer(ordinal_date ~ year + prevWintPPT+ (1 | occID), data = earliest_data)
# Store the mixed-effects model in the list with species name as key
mixed_models[[i]] <- mixed_model
}
library(ggplot2)
library(bayesplot)
library(rstanarm)
library(rstanarm)
library(lme4)
library(lme4)
library(broom.mixed)
# Loop through each species
for (i in spp) {
# Subset data for the current species
subset_data <- subset(phen.abio, scientific_name == i)
# Find the earliest observation for each year while keeping all variables
earliest_data <- subset_data %>%
group_by(year, prevWintPPT, data_type) %>%
filter(ordinal_date == min(ordinal_date)) %>%
ungroup()
# Fit mixed-effects model with fixed effects for year and random effects for data_type; when I included site it was over-fit
mixed_model <- lmer(ordinal_date ~ year + prevWintPPT+ (1 | occID), data = earliest_data)
# Store the mixed-effects model in the list with species name as key
mixed_models[[i]] <- mixed_model
}
# Fit mixed-effects model with fixed effects for year and random effects for data_type; when I included site it was over-fit
mixed_model <- lmer(ordinal_date ~ year + prevWintPPT+ (1 | data_type), data = earliest_data)
# Loop through each species
for (i in spp) {
# Subset data for the current species
subset_data <- subset(phen.abio, scientific_name == i)
# Find the earliest observation for each year while keeping all variables
earliest_data <- subset_data %>%
group_by(year, prevWintPPT, data_type) %>%
filter(ordinal_date == min(ordinal_date)) %>%
ungroup()
# Fit mixed-effects model with fixed effects for year and random effects for data_type; when I included site it was over-fit
mixed_model <- lmer(ordinal_date ~ year + prevWintPPT + (1 | data_type), data = earliest_data)
# Store the mixed-effects model in the list with species name as key
mixed_models[[i]] <- mixed_model
}
model_summaries <- lapply(mixed_models, summary)
print(model_summaries$`Primula angustifolia`)
library(brms)
library(dplyr)
# Initialize an empty list to store models
bayesian_models <- list()
spp <- unique(phen.abio$scientific_name)
# Loop through each species
for (i in spp) {
# Subset data for the current species
subset_data <- subset(phen.abio, scientific_name == i)
# Find the earliest observation for each year while keeping all variables
earliest_data <- subset_data %>%
group_by(year) %>%
filter(ordinal_date == min(ordinal_date)) %>%
ungroup()
# Fit Bayesian mixed-effects model with fixed effects for year and random effects for data_type and site
bayesian_model <- brm(
ordinal_date ~ year + prevWintPPT + data_type,
data = earliest_data,
chains = 4,  # Number of Markov chains
iter = 2000, # Number of iterations per chain
warmup = 1000, # Number of warmup (burn-in) iterations
cores = parallel::detectCores(), # Use all available cores
control = list(adapt_delta = 0.95, max_treedepth = 15)
)
# Store the Bayesian model in the list with species name as key
bayesian_models[[i]] <- bayesian_model
}
library(brms)
