ggplot(phen, aes(x = ordinal_date, y = subsite)) +
geom_boxplot(aes(fill = site), outlier.shape = NA) +
labs(
title = "Box Plot of Values by Category",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values=colors)
ggplot(phen, aes(x = ordinal.date, y = subsite)) +
geom_boxplot(aes(fill = site), outlier.shape = NA) +
labs(
title = "Box Plot of Values by Category",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values=colors) +
facet_wrap(~scientific_name)
ggplot(phen, aes(x = ordinal_date, y = subsite)) +
geom_boxplot(aes(fill = site), outlier.shape = NA) +
labs(
title = "Box Plot of Values by Category",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values=colors) +
facet_wrap(~scientific_name)
ggplot(phen, aes(x = ordinal_date, y = site)) +
geom_boxplot(aes(fill = site), outlier.shape = NA) +
labs(
title = "Box Plot of Values by Category",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values=colors) +
facet_wrap(~scientific_name)
#temporal variation by site and species (all recorded dates)
ggplot(phen, aes(x = ordinal_date, y = site)) +
geom_boxplot(aes(fill = site), outlier.shape = NA) +
labs(
title = "Box Plot of Values by Category",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values=colors)
#temporal variation by site and species (all recorded dates)
siteFig1<-ggplot(phen, aes(x = ordinal_date, y = site)) +
geom_boxplot(aes(fill = site), outlier.shape = NA) +
labs(
title = "Box Plot of Values by Category",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values=colors)
siteFig1.spp <- ggplot(phen, aes(x = ordinal_date, y = site)) +
geom_boxplot(aes(fill = site), outlier.shape = NA) +
labs(
title = "Box Plot of Values by Category",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values=colors) +
facet_wrap(~scientific_name)
ggsave("/Users/elizabethlombardi/Desktop/Research/UNM/Erin phenology project/Figures/siteFig1.png", siteFig1, width = 10, height = 5, dpi = 300)
ggsave("/Users/elizabethlombardi/Desktop/Research/UNM/Erin phenology project/Figures/siteFig1.spp.png", siteFig1.spp, width = 10, height = 5, dpi = 300)
#temporal variation by site and species (all recorded dates)
siteFig2<-ggplot(phen, aes(x = ordinal_date, y = subsite)) + #change between subsite and site depending on what you want to look at
geom_boxplot(aes(fill = site), outlier.shape = NA) +
labs(
title = "Box Plot of Values by Category",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values=colors)
siteFig2.spp <- ggplot(phen, aes(x = ordinal_date, y = subsite)) +
geom_boxplot(aes(fill = site), outlier.shape = NA) +
labs(
title = "Box Plot of Values by Category",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values=colors) +
facet_wrap(~scientific_name)
ggsave("/Users/elizabethlombardi/Desktop/Research/UNM/Erin phenology project/Figures/siteFig2.spp.png", siteFig2.spp, width = 10, height = 5, dpi = 300)
ggsave("/Users/elizabethlombardi/Desktop/Research/UNM/Erin phenology project/Figures/siteFig2.png", siteFig2, width = 10, height = 5, dpi = 300)
#geomridges comparing mean flowering time across species over time
ggplot(phen, aes(x = ordinal_date, y = scientific_name, fill=factor(site))) +
geom_density_ridges(alpha=0.4) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values = colors)
#geomridges comparing mean flowering time across species over time
sppRidges<-ggplot(phen, aes(x = ordinal_date, y = scientific_name, fill=factor(site))) +
geom_density_ridges(alpha=0.4) +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_manual(values = colors)
ggsave("/Users/elizabethlombardi/Desktop/Research/UNM/Erin phenology project/Figures/sppRidges.png", sppRidges, width = 10, height = 5, dpi = 300)
#1.Basic ANOVA for mean flowering time across sites
anova1 <- aov(ordinal_date ~ site, data=phen)
cat("One-way ANOVA for Mean Flowering Time across two sites:\n")
print(summary(anova))
print(summary(anova1))
#2.Basic ANOVA for mean flowering time across subsites
anova2 <- aov(ordinal_date ~ subsite, data=phen)
cat("One-way ANOVA for Mean Flowering Time across all Sub-sites:\n")
print(summary(anova2))
#3. Basic ANOVA for mean flowering time across species. This compares the average ordinal.date values recorded for each species to other species.
anova3 <- aov(ordinal_date ~ scientific_name, data=phen)
cat("One-way ANOVA for Mean Flowering Time across all species:\n")
print(summary(anova3))
early_phen <- phen %>%
group_by(site, scientific.name) %>%
summarize(earliestDate = min(ordinal.date))
early_phen <- phen %>%
group_by(site, scientific_name) %>%
summarize(earliestDate = min(ordinal_date))
View(early_phen)
early_phen <- phen %>%
group_by(site, scientific_name) %>%
summarize(earliestDate = min(ordinal_date))
View(early_phen)
early_phen <- phen %>% #This isn't working properly! Not sure why...? minimum dates for a bunch of species is missing...
group_by(scientific_name) %>%
summarize(earliestDate = min(ordinal_date))
View(early_phen)
early_phen <- phen %>% #This isn't working properly! Not sure why...? minimum dates for a bunch of species is missing...
group_by(site, scientific_name) %>%
summarize(earliestDate = min(ordinal_date))
View(phen)
#Set folder for where PRISM layer downloads go
prism_set_dl_dir("/Users/elizabethlombardi/Desktop/PRISM")
library(prism)
install.packages("prism")
library(prism)
###To use the PRISM API and download via R, you need to define the directories the first time you use it:
#Specify where raster layers will go
options(prism.path="/Users/elizabethlombardi/Desktop/PRISM")
#Set folder for where PRISM layer downloads go
prism_set_dl_dir("/Users/elizabethlombardi/Desktop/PRISM")
#After that first time, you can check to see what data you have in your folders already:
#check out the list of rasters I now have
prism_archive_ls()
prism_get_dl_dir()
#convert the dataframe to an sf object
phen_sf <- st_as_sf(phen, coords = c("longitude", "latitude"), crs = 4326)
library(sf)
#convert the dataframe to an sf object
phen_sf <- st_as_sf(phen, coords = c("longitude", "latitude"), crs = 4326)
phen_sf <- phen %>%
filter(!latitude=="") %>%
filter(!longitude =="") %>%
st_as_sf(coords=c("longitude", "latitude"), crs=4326)
phen$latitude
View(phen)
class(phen$latitude)
class(phen$longitude)
#some of the values are integers but should be numeric
phen<- phen %>%
mutate_if(is.integer, as.numeric) %>%
mutate(latitude = as.numeric(latitude))
phen_sf <- phen %>%
filter(!latitude=="") %>%
filter(!longitude =="") %>%
st_as_sf(coords=c("longitude", "latitude"), crs=4326)
# Group by site and summarize to create the convex hull polygon for each site
sf_sites <- phen_sf %>%
group_by(site) %>%
summarize(geometry = st_convex_hull(st_union(geometry)))
plot(st_geometry(sf_sites), main = "Largest Polygon for Each Site")
#We also need polygons that define the areas of interest (PP and MBS)
pp.aoi <- st_read("/Users/elizabethlombardi/Desktop/Research/UNM/Erin phenology project/Site Polygons/PikesPeak_Poly.shp") %>%
st_transform(4326)
mbs.aoi <- st_read("/Users/elizabethlombardi/Desktop/Research/UNM/Erin phenology project/Site Polygons/MountEvans_Poly.shp") %>%
st_transform(4326)
climate_data_pp<-crop(climate_data, pp.aoi) #clip to just Pikes Peak
??crop()
library(sf)
library(terra)
library(terra)
climate_data_pp<-crop(climate_data, pp.aoi) #clip to just Pikes Peak
# Grab the prism data and compile the files into a raster stack (precip and temp) for pikes peak (PP) and mount blue sky (MBS)
climate_data <- prism_archive_ls() %>%
pd_stack(.)
#After that first time, you can check to see what data you have in your folders already:
#check out the list of rasters I now have
prism_archive_ls()
# Grab the prism data and compile the files into a raster stack (precip and temp) for pikes peak (PP) and mount blue sky (MBS)
climate_data <- prism_archive_ls() %>%
pd_stack(.)
library(maps)
library(mapview)
library(rnaturalearth)
library(rnaturalearthdata)
install.packages("rnaturalearthdata")
library(rnaturalearthdata)
library(sf)
library(spatstat)
library(stars)
library(stringr)
library(tidyverse)
library(spdep)
install.packages("spdep")
library(spdep)
library(splm)
install.packages("splm"
)
library(AOI)
install.packages("AOI")
#library(AOI) not available for this version of r
library(climateR)
library(raster)
library(rasterVis)
# Grab the prism data and compile the files into a raster stack (precip and temp) for pikes peak (PP) and mount blue sky (MBS)
climate_data <- prism_archive_ls() %>%
pd_stack(.)
library(raster)
#After that first time, you can check to see what data you have in your folders already:
#check out the list of rasters I now have
prism_archive_ls()
prism_get_dl_dir()
#IF you don't have any data in your archive folder already
# Download the 30-year annual average precip and annual average temperature
get_prism_normals("ppt", "4km", annual = TRUE, keepZip = FALSE)
get_prism_normals("tmean", "4km", annual = TRUE, keepZip = FALSE)
# Grab the prism data and compile the files into a raster stack (precip and temp) for pikes peak (PP) and mount blue sky (MBS)
climate_data <- prism_archive_ls() %>%
pd_stack(.)
remove.packages("prism")
library(prism)
install.packages("prism", lib="/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library")
###To use the PRISM API and download via R, you need to define the directories the first time you use it:
#Specify where raster layers will go
options(prism.path="/Users/elizabethlombardi/Desktop/PRISM/Erin_PhenologyProject")
#Set folder for where PRISM layer downloads go
prism_set_dl_dir("/Users/elizabethlombardi/Desktop/PRISM/Erin_PhenologyProject")
prism_set_dl_dir('.')
library(prism)
#Set folder for where PRISM layer downloads go
prism_set_dl_dir("/Users/elizabethlombardi/Desktop/PRISM/Erin_PhenologyProject")
###
precip_mbs <- prism::prism(type = "ppt", range = mbs.aoi, start_date = "1980-01-01", end_date = "20222-12-31")
###
precip_mbs <- get_prism_monthlys(type = "ppt", range = mbs.aoi, start_date = "1980-01-01", end_date = "20222-12-31")
??get_prism_monthlys
###
temp.df <- get_prism_normals(
type = "tmean",
resolution = "4km",
mon = 1:12,
annual = TRUE,
keepZip = FALSE
)
warnings()
#IF you don't have any data in your archive folder already
# Download the 30-year annual average precip and annual average temperature
get_prism_normals("ppt", "4km", annual = TRUE, keepZip = FALSE)
get_prism_normals("tmean", "4km", annual = TRUE, keepZip = FALSE)
###
temp.df <- get_prism_normals(
type = "tmean",
resolution = "4km",
mon = 1:12,
annual = TRUE,
keepZip = FALSE
)
###
get_prism_normals(
type = "tmean",
resolution = "4km",
mon = 1:12,
annual = TRUE,
keepZip = FALSE
)
#After that first time, you can check to see what data you have in your folders already:
#check out the list of rasters I now have
prism_archive_ls()
prism_get_dl_dir()
#IF you don't have any data in your archive folder already
# Download the 30-year annual average precip and annual average temperature
get_prism_normals("ppt", "4km", annual = TRUE, keepZip = FALSE)
#IF you don't have any data in your archive folder already
# Download the 30-year annual average precip and annual average temperature
get_prism_monthlys(type = "ppt", years = 1990:2020, mon = 1:12, keepZip = FALSE)
View(phen)
#After that first time, you can check to see what data you have in your folders already:
#check out the list of rasters I now have
prism_archive_ls()
#IF you don't have any data in your archive folder already
# Download the 30-year annual average precip and annual average temperature
get_prism_monthlys(type = "ppt", years = 2019:2020, mon = 1:12, keepZip = TRUE)
warnings()
remove.packages("prism")
remove.packages("prism", lib="/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library")
library(devtools)
library(devtools)
install_github("ropensci/prism")
library(prism)
library(prism)
#After that first time, you can check to see what data you have in your folders already:
#check out the list of rasters I now have
prism_archive_ls()
prism_get_dl_dir()
get_prism_annual("ppt", years = 2000:2022, keepZip = FALSE)
warnings()
names(phen)
early_phen <- phen %>% #This isn't working properly! Not sure why...? minimum dates for a bunch of species is missing...
group_by(site, scientific_name) %>%
summarize(earliestDate = min(ordinal_date))
library(dplyr)
library(ggplot2)
ggplot(early_phen, aes(x = earliestDate, y = site)) +
geom_boxplot(aes(color = site), outlier.shape = NA) +
geom_point(aes(color=site)) +
labs(
title = "Date of earliest flowering by Species and Site",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_manual(values=colors)
class(phen$site)
class(phen$scientific_name)
class(phen$ordinal_date)
View(early_phen)
ggplot(phen, aes(x = ordinal_date, y = site)) +
geom_boxplot(aes(color = site), outlier.shape = NA) +
geom_point(aes(color=site)) +
labs(
title = "Date of earliest flowering by Species and Site",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_manual(values=colors)
ggplot(phen, aes(x = ordinal_date, y = site)) +
geom_boxplot(aes(color = site), outlier.shape = NA) +
geom_point(aes(color=site), alpha=0.3) +
labs(
title = "Date of earliest flowering by Species and Site",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_manual(values=colors)
ggplot(phen, aes(x = min(ordinal_date), y = site)) +
geom_boxplot(aes(color = site), outlier.shape = NA) +
geom_point(aes(color=site), alpha=0.3) +
labs(
title = "Date of earliest flowering by Species and Site",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_manual(values=colors)
ggplot(phen, aes(x = ordinal_date, y = site)) +
geom_boxplot(aes(color = site), outlier.shape = NA) +
geom_point(aes(color=site), alpha=0.3) +
labs(
title = "Date of earliest flowering by Species and Site",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_manual(values=colors)
ggplot(phen, aes(x = ordinal_date, y = site)) +
geom_boxplot(aes(color = site), outlier.shape = NA) +
geom_jitter(aes(color=site), alpha=0.3) +
labs(
title = "Date of earliest flowering by Species and Site",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_manual(values=colors)
ggplot(phen, aes(x = ordinal_date, y = site)) +
geom_boxplot(aes(color = site), outlier.shape = NA) +
geom_jitter(aes(color=site), alpha=0.1) +
labs(
title = "Date of earliest flowering by Species and Site",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_manual(values=colors)
ggplot(early_phen, aes(x = earliestDate, y = site)) +
geom_point(aes(color = site), outlier.shape = NA) +
labs(
title = "Date of earliest flowering by Species and Site",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(legend.position = "top") +
scale_color_manual(values=colors) +
facet_wrap(~scientific.name)
early_phen <- phen %>% #This isn't working properly! Not sure why...? minimum dates for a bunch of species is missing...
group_by(site, scientific_name) %>%
summarize(earliestDate = min(ordinal_date))
early_phen <- phen %>% #This isn't working properly! Not sure why...? minimum dates for a bunch of species is missing...
group_by(scientific_name) %>%
summarize(earliestDate = min(ordinal_date))
early_phen <- phen %>% #This isn't working properly! Not sure why...? minimum dates for a bunch of species is missing...
group_by(site, scientific_name) %>%
summarize(earliestDate = min(ordinal_date))
#i Generally, are flowerings producing buds earlier?
plot(phen$ordinal_date)
#i Generally, are flowerings producing buds earlier?
plot(phen$year~phen$ordinal_date)
#i Generally, are flowerings producing buds earlier?
plot(phen$ordinal_date~phen$year)
#i Generally, are flowerings producing buds earlier?
phen %>% # Convert date_column to Date format
group_by(year) %>%  # Group by year
filter(earliestDate == min(ordinal_date, na.rm = TRUE)) %>%  # Find the earliest date for each year
ggplot(aes(x = year, y = earliestDate)) +
geom_point() +
labs(title = "Earliest Date by Year",
x = "Year",
y = "Earliest Date") +
theme_minimal()
#i Generally, are flowerings producing buds earlier?
phen %>% # Convert date_column to Date format
group_by(year) %>%  # Group by year
filter(earliestDate == min(ordinal_date, na.rm = TRUE)) %>%  # Find the earliest date for each year
ggplot(aes(x = year, y = earliestDate)) +
geom_point() +
labs(title = "Earliest Date by Year",
x = "Year",
y = "Earliest Date") +
theme_minimal()
#i Generally, are flowerings producing buds earlier?
phen %>% # Convert date_column to Date format
group_by(year) %>%  # Group by year
filter(ordinal_date == min(ordinal_date, na.rm = TRUE)) %>%  # Find the earliest date for each year
ggplot(aes(x = year, y = earliestDate)) +
geom_point() +
labs(title = "Earliest Date by Year",
x = "Year",
y = "Earliest Date") +
theme_minimal()
#i Generally, are flowerings producing buds earlier?
try<-phen %>% # Convert date_column to Date format
group_by(year) %>%  # Group by year
filter(ordinal_date == min(ordinal_date, na.rm = TRUE)) %>%  # Find the earliest date for each year
ggplot(aes(x = year, y = earliestDate)) +
geom_point() +
labs(title = "Earliest Date by Year",
x = "Year",
y = "Earliest Date") +
theme_minimal()
try
#i Generally, are flowerings producing buds earlier?
try<-phen %>% # Convert date_column to Date format
group_by(year) %>%  # Group by year
filter(ordinal_date == min(ordinal_date, na.rm = TRUE)) %>%  # Find the earliest date for each year
ggplot(aes(x = year, y = ordinal_date)) +
geom_point() +
labs(title = "Earliest Date by Year",
x = "Year",
y = "Earliest Date") +
theme_minimal()
names(phen)
plot(phen$ordinal_date)
#i Generally, are flowerings producing buds earlier?
try<-phen %>% # Convert date_column to Date format
group_by(year) %>%  # Group by year
filter(minDate == min(ordinal_date, na.rm = TRUE))
#i Generally, are flowerings producing buds earlier?
try<-phen %>% # Convert date_column to Date format
group_by(year) %>%  # Group by year
filter(minDate == min(ordinal_date, na.rm = FALSE))
#i Generally, are flowerings producing buds earlier?
try<-phen %>% # Convert date_column to Date format
group_by(year) %>%  # Group by year
filter(ordinal_date == min(ordinal_date, na.rm = TRUE))
#i Generally, are flowerings producing buds earlier?
try<-phen %>% # Convert date_column to Date format
group_by(year) %>%  # Group by year
mutate(minDate = min(ordinal_date, na.rm = TRUE))
last_dplyr_warnings()
is.list(phen)
is.recursive(phen)
is.data.frame(phen)
flatten(phen)
library(stringr)
library(purrr())
library(purrr)
